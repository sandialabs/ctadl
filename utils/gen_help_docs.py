import subprocess


def convert_indented_paragraphs_to_rst_literal(plaintext):
    # Split the input text into lines
    lines = plaintext.splitlines()
    rst_lines = []

    # Variable to track if we are currently in an indented paragraph
    in_indented_paragraph = False

    for line in lines:
        # Check if the line is indented (starts with whitespace)
        if line.startswith(" "):
            # If we are not already in an indented paragraph, add the literal block marker
            if not in_indented_paragraph:
                rst_lines.append("\n::\n")
                in_indented_paragraph = True

            # Add the indented line to the output with additional indentation
            rst_lines.append("    " + line)
        else:
            # If we encounter a non-indented line and we were in an indented paragraph
            if in_indented_paragraph:
                rst_lines.append("")  # Add a blank line to separate paragraphs
                in_indented_paragraph = False

            # Add the non-indented line as is
            rst_lines.append(line)

    # If the last paragraph was indented, ensure we close it properly
    if in_indented_paragraph:
        rst_lines.append("")  # Add a blank line to separate paragraphs

    return "\n".join(rst_lines)


def generate_help_docs(commands):
    with open("docs/cli_help.rst", "w") as f:
        f.write("Command Line\n")
        f.write("================\n\n")

        f.write(".. note::\n")
        f.write(
            "   This page is autogenerated from a CTADL installation with all available plugins\n\n"
        )

        f.write(f"``ctadl``\n")
        f.write("-----\n")
        result = subprocess.run(["ctadl", "--help"], capture_output=True, text=True)
        f.write(result.stdout + "\n\n")

        for command in commands:
            f.write(f"{command}\n")
            f.write("-" * len(command) + "\n")
            result = subprocess.run(
                ["ctadl", command, "--help"], capture_output=True, text=True
            )
            f.write(result.stdout + "\n\n")


if __name__ == "__main__":
    commands = [
        "index",
        "query",
        "inspect",
        "import",
        "export",
    ]
    generate_help_docs(commands)
