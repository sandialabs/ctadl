#pragma once
#define JADX_THIS_ARG_INDEX (0)
#define JADX_RET_ARG_INDEX (-1)
#define JADX_UNDEFINED_SOURCE_LINE (-1)
#define JADX_STRING_TYPE "Ljava/lang/String;"
#define JADX_TRUE "true"
#define JADX_FALSE "false"

.decl _CTADLLanguage(language:symbol)
.decl _ActualParam(stmt:symbol, argN:number, arg:symbol)
.decl _FormalParam(method:symbol, argN:number, formal:symbol)
.decl _ThisParam(method:symbol, this:symbol)
.decl _ReturnStmt(retStmt:symbol, retVar:symbol)
.decl _Method(method:symbol, simpleName:symbol, declClass:symbol, returnType:symbol, descriptor:symbol, arity:number)
.decl _MethodInvocation(stmt:symbol, callee:symbol, isResolved:symbol, declClass:symbol, simpleName:symbol, descriptor:symbol, invokeType:symbol)
.decl _MethodInvocationReturn(stmt:symbol, retVar:symbol)
.decl _ExternalMethod(externalMethod:symbol)
.decl _Move(stmt:symbol, to:symbol, from:symbol)
.decl _StmtInMethod(stmt:symbol, index:number, method:symbol)
.decl _StmtSourceLine(stmt:symbol, file:symbol, line:number, column:number, offset:number)
.decl _ClassFileName(class:symbol, fileName:symbol)
.decl _VarInMethod(localVar:symbol, method:symbol)
.decl _VarHasType(var:symbol, type:symbol)
.decl _VarHasInternalName(var:symbol, name:symbol)
.decl _VarHasName(var:symbol, name:symbol)
.decl _StaticGet(stmt:symbol, class:symbol, field:symbol, fieldType:symbol, toVar:symbol)
.decl _StaticPut(stmt:symbol, class:symbol, field:symbol, fieldType:symbol, fromVar:symbol)
.decl _StaticExternalField(class:symbol, field:symbol, type:symbol)
.decl _InstanceField(class:symbol, field:symbol, type:symbol)
.decl _IPut(stmt:symbol, class:symbol, field:symbol, toVar:symbol, fromVar:symbol)
.decl _IGet(stmt:symbol, class:symbol, field:symbol, toVar:symbol, fromVar:symbol)
.decl _StmtInBasicblock(stmt:symbol, basic_block:symbol)
.decl _IfStmt(stmt:symbol, ifop:symbol, arg1:symbol, arg2:symbol, if_block:symbol, else_block:symbol)
.decl _TernaryStmt(stmt:symbol, ternary_cond:symbol, if_var:symbol, else_var:symbol)
.decl _TernaryArg(stmt:symbol, ternary_arg:symbol)
.decl _SwitchStmt(stmt:symbol, arg:symbol)
.decl _SwitchTarget(stmt:symbol, key:number, target_block:symbol)
.decl _TypeInstance(stmt:symbol, var:symbol, type:symbol)
.decl _AGet(stmt:symbol, index:number, toVar:symbol, fromVar:symbol)
.decl _APut(stmt:symbol, index:number, toVar:symbol, fromVar:symbol)
.decl _PhiAssign(phi_stmt:symbol, ssa_from_var:symbol, src_block:symbol)
.decl _VarIsConst(constVar:symbol, constValue:symbol)
.decl _FieldIsFinal(class:symbol, field:symbol)
.decl _FieldConstInit(class:symbol, field:symbol, constVar:symbol)
.decl _DirectSuperclass(superclassType:symbol, subclassType:symbol)
.decl _SuperInterface(superinterfaceType:symbol, subclassType:symbol)
.decl _ClassHasName(class:symbol, className:symbol)
.decl _ClassDefinedIn(class:symbol, fileName:symbol, fileLine:number)
.decl _InterfaceType(interfaceType:symbol)
.decl _MethodImplemented(class:symbol, mthShortName:symbol, paramList:symbol, mth:symbol)
.decl _ManifestRoot(nodeId:symbol)
.decl _ManifestNode(nodeId:symbol, nodeName:symbol)
.decl _ManifestNodeChild(nodeId:symbol, childId:symbol)
.decl _ManifestNodeAttr(nodeId:symbol, key:symbol, value:symbol)
.decl _TopParentClass(class:symbol, topParentClass:symbol)
.decl _InsnBytecodeLocation(insn:symbol, artifactUri:symbol, artifactUriBaseId:symbol, byteOffset:number, byteLength:number)
