// - means path is empty
// * means path is non-empty
// p3 is always nonempty or else the rule is REDUNDANT
//   p1 p2 p3
// A -  -  - REDUNDANT
// B -  -  *
// C -  *  - REDUNDANT
// D -  *  *
// E *  -  - REDUNDANT
// F *  -  *
// G *  *  - REDUNDANT
// H *  *  *

// forces isComputedAccessPath and propagation rules to be mutually recursive
// but shouldn't actually add any tuple.
//isComputedAccessPath(cat(ap, ".NO")) :-
//    VirtualAssign(_, _, ap, _, _, _, ""),
//    contains("*********", ap).

// Forward

VirtualAssign(s, v1, p13, v2, p23, "fp", ctx) :- //B
    Vertex(v2, p23),
    VirtualAssign(s, v1, p1, v2, p2, _ty, ctx),
    p1 = "",
    p2 = "",
    p13 = p23,
    !CVar_isGlobal(v1),
    !CVar_isGlobal(v2),
    (v1 != v2; p13 != p23).
.plan 1: (2, 1)
VirtualAssign(s, v1, p13, v2, p23, "fp", ctx) :- //D
    Vertex(v2, p23),
    VirtualAssign(s, v1, p1, v2, p2, _ty, ctx),
    p1 = "",
    p2 != "",
    ComputedAccessPathNonEmptySplit(p23, p2, p3),
    p13 = p3,
    isComputedAccessPath(p13),
    !CVar_isGlobal(v1),
    !CVar_isGlobal(v2),
    (v1 != v2; p13 != p23).
.plan 1: (2, 1, 3, 4), 2: (3, 1, 2, 4), 3: (4, 3, 1, 2)
VirtualAssign(s, v1, p13, v2, p23, "fp", ctx) :- //F
    Vertex(v2, p23),
    VirtualAssign(s, v1, p1, v2, p2, _ty, ctx),
    p1 != "",
    p2 = "",
    p23 = p3,
    ComputedAccessPathNonEmptySplit(p13, p1, p3),
    !CVar_isGlobal(v1),
    !CVar_isGlobal(v2),
    (v1 != v2; p13 != p23).
.plan 1: (2, 1, 3), 2: (3, 2, 1)
VirtualAssign(s, v1, p13, v2, p23, "fp", ctx) :- //H
    Vertex(v2, p23),
    ComputedAccessPathNonEmptySplit(p23, p2, p3),
    VirtualAssign(s, v1, p1, v2, p2, _ty, ctx),
    ComputedAccessPathNonEmptySplit(p13, p1, p3),
    !CVar_isGlobal(v1),
    !CVar_isGlobal(v2),
    (v1 != v2; p13 != p23).
.plan 1: (2, 3, 1, 4), 2: (3, 1, 2, 4), 3: (4, 3, 2, 1)



// Backward

VirtualAssign(s, v2, p23, v1, p13, "fp", ctx) :- //B
    Vertex(v2, p23),
    VirtualAssign(s, v2, p2, v1, p1, _ty, ctx),
    p1 = "",
    p2 = "",
    p13 = p23,
    !CVar_isGlobal(v1),
    !CVar_isGlobal(v2),
    (v1 != v2; p13 != p23).
.plan 1: (2, 1)
VirtualAssign(s, v2, p23, v1, p13, "fp", ctx) :- //D
    Vertex(v2, p23),
    VirtualAssign(s, v2, p2, v1, p1, _ty, ctx),
    p1 = "",
    ComputedAccessPathNonEmptySplit(p23, p2, p3),
    p13 = p3,
    isComputedAccessPath(p13),
    !CVar_isGlobal(v1),
    !CVar_isGlobal(v2),
    (v1 != v2; p13 != p23).
.plan 1: (2, 1, 3, 4), 2: (3, 1, 2, 4), 3: (4, 3, 1, 2)
VirtualAssign(s, v2, p23, v1, p13, "fp", ctx) :- //F
    Vertex(v2, p23),
    VirtualAssign(s, v2, p2, v1, p1, _ty, ctx),
    p2 = "",
    p23 = p3,
    ComputedAccessPathNonEmptySplit(p13, p1, p3),
    !CVar_isGlobal(v1),
    !CVar_isGlobal(v2),
    (v1 != v2; p13 != p23).
.plan 1: (2, 1, 3), 2: (3, 2, 1)
VirtualAssign(s, v2, p23, v1, p13, "fp", ctx) :- //H
    Vertex(v2, p23),
    ComputedAccessPathNonEmptySplit(p23, p2, p3),
    VirtualAssign(s, v2, p2, v1, p1, _ty, ctx),
    ComputedAccessPathNonEmptySplit(p13, p1, p3),
    !CVar_isGlobal(v1),
    !CVar_isGlobal(v2),
    (v1 != v2; p13 != p23).
.plan 1: (2, 1, 3, 4), 2: (3, 2, 1, 4), 3: (4, 3, 2, 1)
